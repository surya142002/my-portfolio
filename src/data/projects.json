{
    "projects": [
      {
        "id": "medicare-fraud-ai",
        "featured": true,
        "title": "Medicare Fraud Detection AI",
        "shortDescription": "An AI-powered fraud detection model trained on Medicare billing data.",
        "longDescription": "This project utilizes machine learning to detect fraudulent Medicare claims based on billing patterns. By analyzing HCPCS codes, service modifiers, allowed charges, and payment amounts, the model identifies potentially fraudulent activity. The system is trained on real CMS data with additional synthetic fraud cases to enhance detection accuracy.",
        "techStack": ["Python", "XGBoost", "pandas", "NumPy", "Scikit-Learn"],
        "images": ["/images/billing_project.png"],
        "github": "",  
        "showVideoOnly": false,
        "extraDescription": {
            "problemStatement": "Medicare fraud costs billions of dollars annually. Traditional fraud detection is slow and manual, making it difficult to prevent fraudulent billing at scale. This project leverages AI to automate fraud detection and flag suspicious claims.",
            "technicalChallenges": [
                "Generating high-quality synthetic fraud data that accurately represents real-world fraud cases.",
                "Balancing fraud detection performance (high recall vs. minimizing false positives).",
                "Ensuring the model generalizes well beyond training data and does not overfit to specific patterns."
            ],
            "keyFeatures": [
                "Identifies fraudulent Medicare claims using machine learning.",
                "Trained on a combination of real CMS data and synthetic fraud cases.",
                "Feature importance analysis highlights key fraud indicators.",
                "Cross-validation ensures stable and robust fraud detection performance."
            ],
            "technologiesUsed": [
                "XGBoost for fraud classification.",
                "pandas and NumPy for data preprocessing.",
                "Scikit-Learn for model evaluation and feature engineering.",
                "Matplotlib for fraud detection visualizations."
            ],
            "whatILearned": [
                "How to generate synthetic fraud cases to improve anomaly detection models.",
                "The role of feature importance in model explainability for fraud detection.",
                "Optimizing ML models to handle imbalanced datasets (scale_pos_weight tuning).",
                "Validating model performance using cross-validation and feature analysis."
            ],
            "futureImprovements": [
                "Incorporating provider-level fraud analysis (detecting suspicious billing behaviors over time).",
                "Expanding fraud detection to include NLP-based analysis of claim descriptions.",
                "Deploying a web-based interface for real-time fraud detection.",
                "Enhancing synthetic data generation to better replicate real fraud patterns."
            ]
        }
    },


      {
        "id": "x-ray-detection",
        "title": "X-Ray Fracture Detection",
        "featured": true,
        "shortDescription": "A deep learning model to classify X-ray fractures into seven types.",
        "longDescription": "This project applies deep learning techniques to classify X-ray images into seven different types of fractures. Using ResNet50, the model was fine-tuned through multiple training stages, including augmentation, Mixup training, and learning rate optimizations. The project features a Streamlit frontend and a Flask backend for real-time predictions.",
        "techStack": ["Python", "PyTorch", "ResNet50", "Streamlit", "Flask"],
        "github": "https://github.com/surya142002/X-ray-Fracture-Detection",
        "images": ["/images/x_ray_detection.png"],
        "showVideoOnly": false,
        "extraDescription": {
            "problemStatement": "X-ray fracture classification is challenging due to subtle differences in fracture types. Automating this process can assist radiologists by providing preliminary assessments.",
            "technicalChallenges": [
                "Fine-tuning ResNet50 to generalize well across different fracture types.",
                "Avoiding overfitting due to dataset size limitations.",
                "Applying data augmentation strategies to improve model robustness.",
                "Using Grad-CAM visualizations to interpret model decisions."
            ],
            "keyFeatures": [
                "Classifies X-ray images into seven fracture categories.",
                "Fine-tuned ResNet50 with data augmentation and Mixup training.",
                "Grad-CAM visualizations to highlight model focus areas.",
                "Interactive web app using Streamlit and Flask for real-time predictions."
            ],
            "technologiesUsed": [
                "PyTorch for deep learning model training.",
                "ResNet50 for image classification.",
                "Flask for serving the trained model via an API.",
                "Streamlit for an interactive frontend to upload and classify X-rays."
            ],
            "whatILearned": [
                "How to fine-tune convolutional neural networks for medical imaging.",
                "Techniques to mitigate overfitting with data augmentation and Mixup training.",
                "How to deploy deep learning models using Flask and Streamlit.",
                "Interpreting model decisions using Grad-CAM heatmaps."
            ],
            "futureImprovements": [
                "Experiment with EfficientNet for improved medical imaging classification.",
                "Implement Faster R-CNN or YOLO for object detection in X-rays.",
                "Collect more labeled X-ray data to improve generalization.",
                "Optimize model inference for real-time predictions in clinical applications."
            ]
        }
    },
        {
            "id": "medicare-data",
            "title": "Medicare Data Project",
            "featured": true,
            "shortDescription": "A full-stack app for exploring Medicare datasets.",
            "longDescription": "The Medicare Data Project is a web platform designed to allow users to search and explore Medicare datasets efficiently. It currently supports dataset uploads for ICD-10 and HCPCS codes and enables basic keyword-based searching. The goal is to make Medicare data more accessible to researchers and healthcare professionals.",
            "techStack": ["React", "Node.js", "PostgreSQL"],
            "video": "/videos/DemoMedicareData.mov",
            "images": ["/images/medicare.png"],
            "github": "https://github.com/surya142002/MedicareData",
            "showVideoOnly": true,
            "extraDescription": {
              "problemStatement": "Medicare data is vast but not easily searchable. This project was built to make healthcare data more accessible to researchers and professionals. While many Medicare datasets exist, they are often difficult to navigate, requiring a user-friendly interface and efficient search capabilities.",
              "technicalChallenges": [
                "Handling large Medicare datasets efficiently without slowing down performance.",
                "Implementing basic keyword-based search functionality for ICD-10 and HCPCS codes.",
                "Ensuring secure user authentication with JWT tokens.",
                "Developing a scalable backend to support future dataset expansions."
              ],
              "keyFeatures": [
                "Secure user authentication with JWT.",
                "Basic search functionality for ICD-10 and HCPCS datasets.",
                "Support for uploading and storing Medicare dataset files.",
                "Unit Testing for backend API endpoints as well as frontend components.",
                "Structured storage of healthcare codes using PostgreSQL."
              ],
              "technologiesUsed": [
                "React for frontend development and UI components.",
                "Node.js & Express for backend API handling.",
                "PostgreSQL for structured data storage."              ],
              "whatILearned": [
                "Optimizing database queries for large-scale healthcare datasets.",
                "How to implement structured data storage for medical code systems.",
                "Best practices for handling file uploads in a web application.",
                "User authentication implementation using JWT."
              ],
              "futureImprovements": [
                "Expanding dataset support beyond ICD-10 and HCPCS codes.",
                "Enhancing search functionality to support natural language queries.",
                "Integrating LLM-based search for more intelligent dataset querying.",
                "Adding advanced filters for better data exploration."
              ]
            }
          },
          
          {
            "id": "object-detection",
            "title": "AI Snitch Machine",
            "featured": false,
            "shortDescription": "Using YOLOv8 and Roboflow to detect similarities in student submissions.",
            "longDescription": "The AI Snitch Machine is a machine learning-powered tool designed to analyze and cluster student ERD (Entity Relationship Diagram) submissions. It uses YOLOv8 for object detection and Roboflow for dataset preprocessing to identify patterns and similarities in diagrams, helping automate grading and plagiarism detection. The project involved developing object detection, OCR text extraction, and clustering techniques to compare diagrams.",
            "techStack": ["Python", "YOLOv8", "Roboflow", "EasyOCR"],
            "images": ["/images/object-detection.png"],
            "showVideoOnly": false,
            "extraDescription": {
              "problemStatement": "Grading student ERD submissions is time-consuming and subjective. This tool helps automate grading by detecting similarities in diagrams and clustering them for easy review.",
              "technicalChallenges": [
                "Training a YOLOv8 model to recognize ERD components (entities, relationships, attributes).",
                "Using OCR (Optical Character Recognition) to extract text from detected diagram elements.",
                "Ensuring accurate object detection across varying student submissions.",
                "Fine-tuning clustering algorithms to group similar diagrams efficiently."
              ],
              "keyFeatures": [
                "Uses YOLOv8 for object detection on ERD diagrams.",
                "OCR-powered text extraction using EasyOCR.",
                "Clusters similar ERD submissions for grading automation.",
                "Preprocessing pipeline for dataset annotation and augmentation."
              ],
              "technologiesUsed": [
                "YOLOv8 for object detection.",
                "Roboflow for dataset preprocessing, annotation, and augmentation.",
                "EasyOCR for text recognition from diagrams.",
                "OpenCV for image manipulation and preprocessing.",
                "Python libraries like Pandas and NumPy for data handling."
              ],
              "whatILearned": [
                "How to preprocess image datasets using Roboflow.",
                "Training and fine-tuning object detection models with YOLOv8.",
                "Using OCR to extract structured text data from images.",
                "Collaborating on a machine learning project remotely (lots of late-night Zoom calls!)."
              ]
            }
          },
          
          {
            "id": "pacman-ai",
            "title": "Pac-Man AI",
            "featured": false,
            "shortDescription": "Implemented classical search algorithms in a Pac-Man environment.",
            "longDescription": "As part of a structured course project, I developed AI agents for Pac-Man using classical search algorithms such as Depth-First Search (DFS), Breadth-First Search (BFS), Uniform Cost Search, and A*. This project provided hands-on experience with foundational AI concepts and their application in pathfinding and decision-making within a game environment.",
            "techStack": ["Python"],
            "images": ["/images/pacman.png"],
            "showVideoOnly": false,
            "extraDescription": {
              "problemStatement": "Navigate Pac-Man through mazes to collect all pellets efficiently while avoiding ghosts.",
              "technicalChallenges": [
                "Implementing various search algorithms to find optimal paths.",
                "Balancing exploration and exploitation in pathfinding.",
                "Understanding the trade-offs between different search strategies."
              ],
              "keyFeatures": [
                "Implementation of DFS, BFS, Uniform Cost Search, and A* algorithms.",
                "Visualization of search processes within the Pac-Man game.",
                "Comparison of algorithm performance in different maze scenarios."
              ],
              "technologiesUsed": [
                "Python for algorithm implementation.",
                "Provided Pac-Man codebase for simulation and testing."
              ],
              "whatILearned": [
                "Practical application of classical search algorithms.",
                "Analyzing the efficiency and effectiveness of different search strategies.",
                "Gained foundational understanding of AI problem-solving techniques."
              ]
            }
          },
          
          {
            "id": "my-shell",
            "title": "My Shell",
            "featured": false,
            "shortDescription": "Implemented a Unix-like shell with process handling, redirection, and piping.",
            "longDescription": "As part of a structured course project, I implemented key features of a Unix-like shell in C and C++. This involved command parsing, executing processes, managing input/output redirection, and handling background processes. The project provided hands-on experience with system calls, process management, and inter-process communication.",
            "techStack": ["C", "C++"],
            "images": ["/images/shell.png"],
            "showVideoOnly": false,
            "extraDescription": {
              "problemStatement": "Understanding how Unix-like shells execute commands and manage processes is fundamental to systems programming. This project involved implementing a shell interpreter to execute commands, support redirection, and handle signals efficiently.",
              "technicalChallenges": [
                "Implementing command parsing to support arguments, piping, and redirection.",
                "Managing foreground and background processes using `fork()`, `execvp()`, and `waitpid()`.",
                "Handling zombie processes using `SIGCHLD` and ensuring proper process cleanup.",
                "Implementing I/O redirection (`>`, `<`, `>>`) and pipes (`|`) for inter-process communication."
              ],
              "keyFeatures": [
                "Supports command execution with arguments.",
                "Implements background process management (`&`).",
                "Handles input/output redirection and error redirection.",
                "Supports command history and basic tab completion."
              ],
              "technologiesUsed": [
                "C and C++ for systems-level programming.",
                "POSIX system calls for process creation and management.",
                "Lex & Yacc for command parsing.",
                "Signal handling (`SIGINT`, `SIGCHLD`) for controlling background processes."
              ],
              "whatILearned": [
                "How shells use `fork()`, `execvp()`, and `waitpid()` to manage processes.",
                "Implementing pipes (`|`) to connect processes together.",
                "Handling user input with command parsing using Lex & Yacc.",
                "How to properly manage memory allocation for command structures."
              ]
            }
          },
          
          {
            "id": "memory-allocator",
            "title": "Memory Allocator",
            "featured": false,
            "shortDescription": "Implemented a custom memory allocator with dynamic allocation strategies.",
            "longDescription": "As part of a structured course project, I implemented a custom memory allocator in C that mimics the behavior of `malloc()`, `free()`, and `realloc()`. This project provided hands-on experience with memory management, including dynamic allocation, fragmentation handling, and efficient space utilization. The implementation included various allocation strategies and ensured thread safety using mutex locks.",
            "techStack": ["C", "C++"],
            "images": ["/images/memory-allocator.png"],
            "showVideoOnly": false,
            "extraDescription": {
              "problemStatement": "Understanding how memory allocation works at a low level is fundamental to systems programming. This project involved implementing a custom memory allocator to manage heap memory efficiently, similar to how `malloc()` works in standard C libraries.",
              "technicalChallenges": [
                "Implementing `malloc()`, `free()`, and `realloc()` from scratch while maintaining efficiency.",
                "Handling fragmentation to optimize memory reuse.",
                "Ensuring thread safety using mutexes for concurrent memory allocation.",
                "Developing multiple allocation strategies including first fit, next fit, best fit, and worst fit."
              ],
              "keyFeatures": [
                "Custom implementations of `malloc()`, `free()`, and `realloc()`.",
                "Freelist-based memory management with coalescing to minimize fragmentation.",
                "Implemented various allocation strategies: first fit, next fit, best fit, and worst fit.",
                "Thread safety ensured using mutex locks."
              ],
              "technologiesUsed": [
                "C for low-level memory management.",
                "POSIX system calls (`sbrk()`, `mmap()`) for heap expansion.",
                "Mutex locks for thread-safe allocations."
              ],
              "whatILearned": [
                "How dynamic memory allocation works under the hood.",
                "Techniques for reducing memory fragmentation using freelists and coalescing.",
                "Implementing and comparing different allocation strategies for performance.",
                "Ensuring thread safety in memory management using mutexes."
              ]
            }
          },
          
          {
            "id": "chatroom",
            "title": "Java Chatroom",
            "featured": false,
            "shortDescription": "A multi-user chat application built in Java with networking and GUI.",
            "longDescription": "For my Object-Oriented Programming final project, my team and I developed a real-time chatroom application in Java. This project was my first experience working in a group, using Git for version control, and implementing a structured software project from start to finish. The chatroom supports multiple users, message broadcasting, account management, and moderation tools, all built with Java's Swing for the GUI and Java Sockets for networking.",
            "techStack": ["Java", "Swing", "Sockets", "JUnit"],
            "images": ["/images/chatroom.png"],
            "showVideoOnly": false,
            "extraDescription": {
              "problemStatement": "We wanted to build a real-time chat application that allowed multiple users to communicate, similar to early instant messaging platforms.",
              "technicalChallenges": [
                "Implementing a client-server architecture using Java Sockets.",
                "Managing concurrent user connections with multithreading. (We ended up just using a refresh button instead of real-time updates.)",
                "Handling message broadcasting efficiently between clients.",
                "Implementing account management with user authentication."
              ],
              "keyFeatures": [
                "Real-time messaging using Java Sockets.",
                "Multi-user chatrooms with message broadcasting.",
                "Graphical user interface built with Java Swing.",
                "User authentication and account management.",
                "Moderator controls (e.g., kicking users, editing messages)."
              ],
              "technologiesUsed": [
                "Java for object-oriented programming and networking.",
                "Swing for creating the graphical user interface.",
                "Sockets for handling client-server communication.",
                "JUnit for unit testing core functionality."
              ],
              "whatILearned": [
                "How to build a client-server application with Java Sockets.",
                "Fundamentals of multithreading for handling concurrent connections.",
                "Best practices for using Git and working in a collaborative development environment.",
                "Writing and running unit tests using JUnit."
              ]
            }
          },
          
          {
            "id": "merck-data-viz",
            "title": "Bio-Wearables Data Visualization",
            "featured": false,
            "shortDescription": "A simple R Shiny dashboard for visualizing Fitbit health data.",
            "longDescription": "This was my first experience working in an Agile/Scrum environment. As part of a student team in Purdue’s Data Mine program, I worked on a data visualization project in collaboration with Merck. Our team built an interactive dashboard using R Shiny to analyze Fitbit bio-wearables data. The goal was to transform large datasets into intuitive graphs and charts to help researchers identify trends in physical activity and heart rate metrics.",
            "techStack": ["R", "Shiny", "Plotly", "ggplot2"],
            "images": ["/images/merck.png"],
            "showVideoOnly": false,
            "extraDescription": {
              "problemStatement": "The goal of this project was to take complex Fitbit bio-wearables data and present it in an interactive, easy-to-understand format for researchers.",
              "technicalChallenges": [
                "Connecting and querying a remote database (MariaDB) to fetch Fitbit data.",
                "Handling large datasets efficiently in R for real-time visualization.",
                "Designing a clean and interactive dashboard using R Shiny."
              ],
              "keyFeatures": [
                "Interactive dashboards for Fitbit data analysis.",
                "Visualizations of activity levels, step counts, and heart rate trends.",
                "SQL-based data retrieval from a MariaDB database.",
                "Filters to explore specific time periods and data points."
              ],
              "technologiesUsed": [
                "R for data processing and visualization.",
                "Shiny for building interactive web dashboards.",
                "Plotly & ggplot2 for creating dynamic charts and graphs.",
                "MariaDB for storing and querying Fitbit data."
              ],
              "whatILearned": [
                "How to work in an Agile/Scrum environment with sprints and daily standups.",
                "Using tools like Confluence and Trello for project tracking.",
                "Building interactive dashboards with R Shiny.",
                "Collaborating with corporate partners in a structured project setting."
              ]
            }
          },
          
      {
        "id": "battleship",
        "title": "Battleship Game",
        "featured": false,
        "shortDescription": "A Java-based Battleship game that sparked my interest in computer science.",
        "longDescription": "This was my first real programming project, and it played a huge role in getting me interested in computer science. As a group, we built a turn-based Battleship game in Java, implementing a graphical interface, and game logic. The project had its challenges, including a complete restart after realizing our initial approach was flawed, but in the end, it was an incredibly rewarding experience that made programming fun for me.",
        "techStack": ["Java"],
        "images": ["/images/battleship.png"],
        "showVideoOnly": false,
        "extraDescription": {
          "problemStatement": "We wanted to create a digital version of Battleship with a functional user interface and turn-based gameplay.",
          "technicalChallenges": [
            "Redesigning the project after realizing our initial approach wasn’t working.",
            "Implementing ship placement logic to prevent overlapping and ensure valid placements.",
            "Handling game state updates and turn-based mechanics efficiently."
          ],
          "keyFeatures": [
            "Turn-based gameplay with two-player support.",
            "Graphical interface built with Java Swing.",
            "Randomized ship placement and hit/miss detection."
          ],
          "technologiesUsed": [
            "Java for game logic and object-oriented design.",
            "Swing for building the graphical user interface."
          ],
          "whatILearned": [
            "The importance of planning before coding—our first version had to be scrapped and rewritten.",
            "Fundamentals of object-oriented programming and game logic.",
            "How to work as a team in a collaborative coding project."
          ]
        }
      }
      
    ]
  }
  